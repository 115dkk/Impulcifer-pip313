name: Create Release on Master Push

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build requirements and project dependencies
        run: |
          echo "[1/3] Installing required packages..."
          python -m pip install --upgrade pip
          pip install nuitka
          if python -c "import sys; exit(0) if sys.version_info.major == 3 and sys.version_info.minor >= 11 else exit(1)"; then
            echo "Python 3.11+ detected, tomllib is available."
          else
            echo "Python < 3.11 detected, installing toml package."
            pip install toml
          fi
          echo "Installing project dependencies from requirements.txt..."
          pip install -r requirements.txt
        shell: bash

      - name: Read project version and set APP_VERSION
        run: |
          python get_version.py
        shell: bash

      - name: Run Nuitka build using build_nuitka.py
        run: |
          echo "[2/3] Starting Nuitka build..."
          python build_nuitka.py
          # Windows 경로 형식으로 환경 변수 설정
          echo "NUITKA_OUTPUT_DIR=${{ github.workspace }}\dist\Impulcifer_Distribution\ImpulciferGUI" >> $GITHUB_ENV
          echo "PROJECT_ROOT_FOR_ISS=${{ github.workspace }}" >> $GITHUB_ENV
          echo "ISS_PATH=${{ github.workspace }}\.github\workflows\Output" >> $GITHUB_ENV
          echo "Successfully built with Nuitka."
        shell: bash
        env:
          PYTHONIOENCODING: UTF-8
          
      - name: Debug environment variables
        run: |
          echo "=== Debug Environment Variables ==="
          echo "APP_VERSION: ${{ env.APP_VERSION }}"
          echo "NUITKA_OUTPUT_DIR: ${{ env.NUITKA_OUTPUT_DIR }}"
          echo "PROJECT_ROOT_FOR_ISS: ${{ env.PROJECT_ROOT_FOR_ISS }}"
          echo "GITHUB_WORKSPACE: ${{ github.workspace }}"
          echo ""
          echo "=== Checking if build output exists ==="
          if [ -d "${{ github.workspace }}/dist/Impulcifer_Distribution/ImpulciferGUI" ]; then
            echo "✅ Nuitka output directory found!"
            ls -la "${{ github.workspace }}/dist/Impulcifer_Distribution/ImpulciferGUI"
          else
            echo "❌ Nuitka output directory not found"
            echo "Available directories in dist:"
            ls -la "${{ github.workspace }}/dist/" || echo "dist directory not found"
          fi
        shell: bash
        
      - name: Set up Inno Setup
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: .github/workflows/Impulcifer install maker.iss
          options: /DNUITKA_BUILD_DIR="${{ env.NUITKA_OUTPUT_DIR }}" /DAPP_VERSION="${{ env.APP_VERSION }}" /DPROJECT_ROOT_FOR_ISS="${{ env.PROJECT_ROOT_FOR_ISS }}" /DISS_PATH="${{ env.ISS_PATH }}"

      - name: Compile Inno Setup script
        run: |
          echo "=== Compiling Inno Setup script ==="
          echo "APP_VERSION: ${{ env.APP_VERSION }}"
          echo "NUITKA_OUTPUT_DIR: ${{ env.NUITKA_OUTPUT_DIR }}"
          echo "PROJECT_ROOT_FOR_ISS: ${{ env.PROJECT_ROOT_FOR_ISS }}"
          echo "ISS_PATH: ${{ env.ISS_PATH }}"

          # Inno Setup 컴파일 (이미 위의 Set up Inno Setup 단계에서 처리됨)
          echo "INSTALLER_PATH=${{ env.ISS_PATH }}/Impulcifer_Setup.exe" >> $GITHUB_ENV
          echo "✅ Successfully compiled installer with Inno Setup."
        shell: bash

      - name: Generate Release Tag and Notes
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Generated tag: $TAG_NAME"

          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          COMMIT_RANGE=""
          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="$LAST_TAG..HEAD"
          fi

          CHANGELOG_BODY=$(git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $COMMIT_RANGE)
          CHANGELOG_BODY="${CHANGELOG_BODY//'%'/'%25'}"
          CHANGELOG_BODY="${CHANGELOG_BODY//$'\n'/'%0A'}"
          CHANGELOG_BODY="${CHANGELOG_BODY//$'\r'/'%0D'}"

          echo "RELEASE_NOTES=$CHANGELOG_BODY" >> $GITHUB_ENV
          echo "Generated release notes."
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            Automated release for ${{ env.TAG_NAME }}

            **Changes:**
            ${{ env.RELEASE_NOTES }}
          files: |
            ${{ env.INSTALLER_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
